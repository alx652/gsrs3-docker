diff --git a/frontend/pom.xml b/frontend/pom.xml
index 62d3878..4530efc 100644
--- a/frontend/pom.xml
+++ b/frontend/pom.xml
@@ -5,7 +5,7 @@
     <parent>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-parent</artifactId>
-        <version>2.5.1</version>
+        <version>2.4.5</version>
         <relativePath/> <!-- lookup parent from repository -->
     </parent>
     <groupId>gov.nih.ncats</groupId>
diff --git a/gateway/pom.xml b/gateway/pom.xml
index d6ce7b0..865bbb9 100644
--- a/gateway/pom.xml
+++ b/gateway/pom.xml
@@ -5,7 +5,7 @@
     <parent>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-parent</artifactId>
-        <version>2.3.7.RELEASE</version>
+        <version>2.4.5</version>
         <relativePath/> <!-- lookup parent from repository -->
     </parent>
     <groupId>gov.nih.ncats</groupId>
@@ -17,7 +17,7 @@
 
     <properties>
         <java.version>8</java.version>
-        <spring-cloud.version>Hoxton.SR9</spring-cloud.version>
+        <spring-cloud.version>2020.0.2</spring-cloud.version>
         <log4j2.version>2.17.1</log4j2.version>
     </properties>
 
@@ -38,6 +38,7 @@
         <dependency>
             <groupId>org.springframework.cloud</groupId>
             <artifactId>spring-cloud-starter-netflix-zuul</artifactId>
+            <version>2.2.10.RELEASE</version>
         </dependency>
         <dependency>
             <groupId>org.springframework.cloud</groupId>
diff --git a/gateway/src/main/java/gsrs/ncats/gateway/ZuulConfiguration.java b/gateway/src/main/java/gsrs/ncats/gateway/ZuulConfiguration.java
new file mode 100644
index 0000000..96736ce
--- /dev/null
+++ b/gateway/src/main/java/gsrs/ncats/gateway/ZuulConfiguration.java
@@ -0,0 +1,105 @@
+package gsrs.ncats.gateway;
+
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Method;
+
+import org.springframework.beans.BeansException;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.config.BeanPostProcessor;
+import org.springframework.boot.web.servlet.error.ErrorController;
+import org.springframework.cglib.proxy.Callback;
+import org.springframework.cglib.proxy.CallbackFilter;
+import org.springframework.cglib.proxy.Enhancer;
+import org.springframework.cglib.proxy.MethodInterceptor;
+import org.springframework.cglib.proxy.MethodProxy;
+import org.springframework.cglib.proxy.NoOp;
+import org.springframework.cloud.netflix.zuul.filters.RouteLocator;
+import org.springframework.cloud.netflix.zuul.web.ZuulController;
+import org.springframework.cloud.netflix.zuul.web.ZuulHandlerMapping;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+/** Zuul configuration. */
+@Configuration
+public class ZuulConfiguration {
+
+    /** The path returned by ErrorContoller.getErrorPath() with Spring Boot < 2.5 (and no longer available on Spring Boot >= 2.5). */
+    private static final String ERROR_PATH = "/error";
+
+    /**
+     * Constructs a new bean post-processor for Zuul.
+     * 
+     * @param routeLocator
+     *            the route locator.
+     * @param zuulController
+     *            the Zuul controller.
+     * @param errorController
+     *            the error controller.
+     * @return the new bean post-processor.
+     */
+    @Bean
+    public ZuulPostProcessor zuulPostProcessor(@Autowired RouteLocator routeLocator, @Autowired ZuulController zuulController,
+            @Autowired(required = false) ErrorController errorController) {
+        return new ZuulPostProcessor(routeLocator, zuulController, errorController);
+    }
+
+    private static final class ZuulPostProcessor implements BeanPostProcessor {
+
+        private final RouteLocator routeLocator;
+
+        private final ZuulController zuulController;
+
+        private final boolean hasErrorController;
+
+        ZuulPostProcessor(RouteLocator routeLocator, ZuulController zuulController, ErrorController errorController) {
+            this.routeLocator = routeLocator;
+            this.zuulController = zuulController;
+            this.hasErrorController = (errorController != null);
+        }
+
+        @Override
+        public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
+            if (hasErrorController && (bean instanceof ZuulHandlerMapping)) {
+                Enhancer enhancer = new Enhancer();
+                enhancer.setSuperclass(ZuulHandlerMapping.class);
+                enhancer.setCallbackFilter(LookupHandlerCallbackFilter.INSTANCE); // only for lookupHandler
+                enhancer.setCallbacks(new Callback[] { LookupHandlerMethodInterceptor.INSTANCE, NoOp.INSTANCE });
+                Constructor<?> ctor = ZuulHandlerMapping.class.getConstructors()[0];
+                return enhancer.create(ctor.getParameterTypes(), new Object[] { routeLocator, zuulController });
+            }
+            return bean;
+        }
+
+    }
+
+    private static enum LookupHandlerCallbackFilter implements CallbackFilter {
+
+        INSTANCE;
+
+        @Override
+        public int accept(Method method) {
+            if ("lookupHandler".equals(method.getName())) {
+                return 0;
+            }
+            return 1;
+        }
+
+    }
+
+    private static enum LookupHandlerMethodInterceptor implements MethodInterceptor {
+
+        INSTANCE;
+
+        @Override
+        public Object intercept(Object target, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
+            if (ERROR_PATH.equals(args[0])) {
+
+                /* by entering this branch we avoid the ZuulHandlerMapping.lookupHandler method to trigger the NoSuchMethodError */
+                return null;
+            }
+            return methodProxy.invokeSuper(target, args);
+        }
+
+    }
+
+}
